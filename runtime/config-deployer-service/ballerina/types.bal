import config_deployer_service.model;

import ballerina/constraint;
// AUTO-GENERATED FILE.
// This file is auto-generated by the Ballerina OpenAPI tool.
import ballerina/http;

# Configuration for a successful response.
#
# + body - The body of the response containing any data.
public type OkAnydata record {|
    *http:Ok;
    anydata body;
|};

# Configuration for a Not Found error response.
#
# + body - The body of the response containing error details.
public type NotFoundError record {|
    *http:NotFound;
    Error body;
|};

# Configuration for a Bad Request error response.
#
# + body - The body of the response containing error details.
public type BadRequestError record {|
    *http:BadRequest;
    Error body;
|};

# Configuration for an Accepted response.
#
# + body - The body of the response containing a string.
public type AcceptedString record {|
    *http:Accepted;
    string body;
|};

# Configuration for Internal Server Error response.
#
# + body - The body of the response containing error details.
public type InternalServerErrorError record {|
    *http:InternalServerError;
    Error body;
|};

# Configuration for a list of errors.
#
# + code - The code representing the error.
# + message - Description about individual errors occurred.
# + description - A detailed description about the error message.
public type ErrorListItem record {
    string code;
    string message;
    string description?;
};

# Configuration for Endpoint Security.
#
# + enabled - Indicates whether the endpoint security is enabled.
# + securityType - Configuration for the basic endpoint security.
public type EndpointSecurity record {
    boolean enabled?;
    BasicEndpointSecurity|APIKeyEndpointSecurity securityType?;
};

# Configuration for Custom Claims.
#
# + claim - The name of the custom claim.
# + value - The value of the custom claim.
# + type - The type of the custom claim.
public type CustomClaims record {
    string claim;
    string value;
    string 'type = "string";
};

# Configuration for a K8s Service.
#
# + name - The name of the K8s service.
# + namespace - The namespace in which the service is defined.
# + port - The port on which the service is exposed.
# + protocol - The protocol used by the service (e.g., "TCP", "UDP").
public type K8sService record {
    string name?;
    string namespace?;
    int port?;
    string protocol?;
};

# Configuration for Rate Limiting.
#
# + requestsPerUnit - Number of requests allowed per specified unit of time.
# + unit - Unit of time for the rate limit.
public type RateLimit record {
    int requestsPerUnit;
    string unit;
};

# Configuration for Basic Endpoint Security.
#
# + secretName - The name of the secret containing the credentials.
# + userNameKey - The key to retrieve the username from the secret.
# + passwordKey - The key to retrieve the password from the secret.
public type BasicEndpointSecurity record {
    string secretName;
    string userNameKey;
    string passwordKey;
};

# Configuration for API Key Endpoint Security.
#
# + secretName - The name of the secret containing the API key.
# + in - The mode of sending Ex: header/query.
# + apiKeyNameKey - API key Header name.
# + apiKeyValueKey - Key to retrieve API key Header value from the secret.
public type APIKeyEndpointSecurity record {
    string secretName;
    string 'in;
    string apiKeyNameKey;
    string apiKeyValueKey;
};

# Configuration for APK Operations.
#
# + target - The target endpoint for the operation.
# + verb - The HTTP verb for the operation.
# + secured - Indicates if authentication is applied to the operation(true/false).
# + endpointConfigurations - Configuration for the endpoint.
# + operationPolicies - Policies to be applied for the operation.
# + rateLimit - Rate limiting configuration for the operation.
# + scopes - Scopes required for the operation.
public type APKOperations record {
    string target?;
    string verb?;
    boolean secured?;
    EndpointConfigurations endpointConfigurations?;
    APIOperationPolicies operationPolicies?;
    RateLimit rateLimit?;
    string[] scopes?;
};

public type APKOperationPolicy APKRequestOperationPolicy|APKResponseOperationPolicy;

# Common type for request operation policies.
public type APKRequestOperationPolicy InterceptorPolicy|BackendJWTPolicy|HeaderModifierPolicy|RequestMirrorPolicy|RequestRedirectPolicy;

# Common type for response operation policies.
public type APKResponseOperationPolicy InterceptorPolicy|BackendJWTPolicy|HeaderModifierPolicy;

# Header modification configuration for an operation.
#
# + parameters - Contains header name and value of the header.
public type HeaderModifierPolicy record {
    *BaseOperationPolicy;
    HeaderModifierPolicyParameters parameters;
};

# Configuration for header modifiers as received from the apk-conf file.
#
# + headerName - Header name to be added, set or removed.
# + headerValue - Header value to be added, set or removed.
public type HeaderModifierPolicyParameters record {|
    string headerName;
    string headerValue?;
|};

# Request mirror configuration for an operation.
#
# + parameters - Contains the urls to request the mirror to.
public type RequestMirrorPolicy record {
    *BaseOperationPolicy;
    RequestMirrorPolicyParameters parameters;
};

# Configuration containing the different headers.
#
# + urls - The urls to mirror the filters to.
public type RequestMirrorPolicyParameters record {|
    string[] urls;
|};

# Request redirect configuration for an operation.
#
# + parameters - Contains the url to redirect the request to.
public type RequestRedirectPolicy record {
    *BaseOperationPolicy;
    RequestRedirectPolicyParameters parameters;
};

# Configuration containing the different headers.
#
# + url - The url to redirect the filters to.
# + statusCode - The status code to be sent as response to the client.
public type RequestRedirectPolicyParameters record {|
    string url;
    int statusCode?;
|};

# Configuration for API deployment using the apk-conf file.
#
# + apkConfiguration - APK Configuration (apk-conf) file.
# + definitionFile - API definition (OAS/Graphql/WebSocket).
public type DeployApiBody record {
    record {byte[] fileContent; string fileName;} apkConfiguration?;
    record {byte[] fileContent; string fileName;} definitionFile?;
};

# Configuration of APK Operation Policies.
#
# + request - List of policies to be applied on the request.
# + response - List of policies to be applied on the response.
public type APIOperationPolicies record {
    APKRequestOperationPolicy[] request?;
    APKResponseOperationPolicy[] response?;
};

# Additional properties for APK configuration.
#
# + name - The name of the additional property.
# + value - The value of the additional property.
public type APKConf_additionalProperties record {
    string name?;
    string value?;
};

# Configuration of Resiliency settings.
#
# + circuitBreaker - Configuration for the CircuitBreaker.
# + timeout - Configuration for the Timeout.
# + retryPolicy - Configuration for the RetryPolicy.
public type Resiliency record {
    CircuitBreaker circuitBreaker?;
    Timeout timeout?;
    RetryPolicy retryPolicy?;
};

# Configuration of AIRatelimit settings.
#
# + token - Configuration for the CircuitBreaker.
# + request - Configuration for the Timeout.
public type AIRatelimit record {
    boolean enabled;
    TokenAIRL token;
    RequestAIRL request;
};

# Configuration for Token AI rate limit settings.
#
# + promptLimit - Limit for prompts within the specified unit.
# + completionLimit - Limit for completions within the specified unit.
# + totalLimit - Total limit combining prompt and completion counts.
# + unit - The time unit for the rate limits (Minute, Hour, Day).
public type TokenAIRL record {
    int promptLimit;
    int completionLimit;
    int totalLimit;
    string unit;
};

# Configuration for Request AI rate limit settings.
#
# + requestLimit - Limit for requests within the specified unit.
# + unit - The time unit for the request limits (Minute, Hour, Day).
public type RequestAIRL record {
    int requestLimit;
    string unit;
};

# Configuration of CircuitBreaker settings.
#
# + maxConnectionPools - The maximum number of connection pools allowed.
# + maxConnections - The maximum number of connections allowed.
# + maxPendingRequests - The maximum number of pending requests allowed.
# + maxRequests - The maximum number of requests allowed.
# + maxRetries - The maximum number of retries allowed.
public type CircuitBreaker record {
    int maxConnectionPools?;
    int maxConnections?;
    int maxPendingRequests?;
    int maxRequests?;
    int maxRetries?;
};

# Common type for all authentication types.
public type AuthenticationRequest OAuth2Authentication|APIKeyAuthentication|MTLSAuthentication|JWTAuthentication;

# Configuration for production and sandbox endpoints.
#
# + production - Production endpoint.
# + sandbox - Sandbox endpoint.
public type EndpointConfigurations record {
    EndpointConfiguration production?;
    EndpointConfiguration sandbox?;
};

# Configuration for production and sandbox endpoints.
#
# + endpoint - The endpoint which can be a string or a Kubernetes service.
# + endpointSecurity - The security configuration for the endpoint.
# + certificate - The certificate configuration for the endpoint.
# + resiliency - The resiliency configuration for the endpoint.
# + aiRatelimit - The AIRatelimit configuration for the AI ratelimit.
public type EndpointConfiguration record {
    string|K8sService endpoint;
    EndpointSecurity endpointSecurity?;
    Certificate certificate?;
    Resiliency resiliency?;
    AIRatelimit aiRatelimit?;
};

# Configuration of OAuth2 Authentication type.
#
# + required - Is OAuth2 authentication mandatory/optional.
# + sendTokenToUpstream - Enables sending the value to the upstream.
# + headerName - Header name for sending the OAuth2 value.
# + headerEnable - Enable sending OAuth2 as a header.
public type OAuth2Authentication record {|
    *Authentication;
    string required = "mandatory";
    boolean sendTokenToUpstream = false;
    string headerName = "Authorization";
    boolean headerEnable = true;
|};

# Configuration of JWT Authentication type.
#
# + required - Is JWT authentication mandatory/optional.
# + sendTokenToUpstream - Enables sending the value to the upstream.
# + headerName - Header name for sending the JWT value.
# + headerEnable - Enable sending the JWT as a header.
# + audience - List of audiences for the JWT.
public type JWTAuthentication record {|
    *Authentication;
    string required = "mandatory";
    boolean sendTokenToUpstream = false;
    string headerName = "Authorization";
    boolean headerEnable = true;
    string[] audience = [];
|};

# Configuration of timeout.
#
# + downstreamRequestIdleTimeout - field description  
# + upstreamResponseTimeout - field description
public type Timeout record {
    int downstreamRequestIdleTimeout?;
    int upstreamResponseTimeout?;
};

# Configuration needed to generate K8s resources.
#
# + apkConfiguration - APK Configuration (apk-conf) file.
# + definitionFile - API definition (OAS/Graphql/WebSocket)
# + apiType - Type of API.
public type GenerateK8sResourcesBody record {
    record {byte[] fileContent; string fileName;} apkConfiguration?;
    record {byte[] fileContent; string fileName;} definitionFile?;
    string apiType?;
};

# Configuration of an error.
#
# + code - Error code.
# + message - Error message.
# + description - A detailed description about the error message.
# + moreInfo - Preferably a URL with more details about the error.
# + 'error - A list containing multiple errors if any. For example, list out validation errors by each field.
public type Error record {
    int code;
    string message;
    string description?;
    string moreInfo?;
    ErrorListItem[] 'error?;
};

# Definition body of the API definition.
#
# + definition - API definition (OAS/Graphql/WebSocket).
# + url - URL of API definition.
# + apiType - Type of API.
public type DefinitionBody record {
    record {byte[] fileContent; string fileName;} definition?;
    string url?;
    string apiType?;
};

# CORS Configuration of API
#
# + corsConfigurationEnabled - field description  
# + accessControlAllowOrigins - Field Description  
# + accessControlAllowCredentials - Field Description  
# + accessControlAllowHeaders - Field Description  
# + accessControlAllowMethods - Field Description  
# + accessControlAllowMaxAge - Field Description  
# + accessControlExposeHeaders - Field Description
public type CORSConfiguration record {
    boolean corsConfigurationEnabled = false;
    string[] accessControlAllowOrigins?;
    boolean accessControlAllowCredentials?;
    string[] accessControlAllowHeaders?;
    string[] accessControlAllowMethods?;
    int accessControlAllowMaxAge?;
    string[] accessControlExposeHeaders?;
};

# Common configuration of all policies.
#
# + policyName - Name of the policy.
# + policyVersion - Version of the policy.
# + policyId - ID of the policy.
public type BaseOperationPolicy record {
    PolicyName policyName;
    string policyVersion = "v1";
    string policyId?;
};

# Enum for all possible policy types.
public enum PolicyName {
    BackendJwt,
    Interceptor,
    AddHeader,
    SetHeader,
    RemoveHeader,
    RequestMirror,
    RequestRedirect
}

# Configuration for authentication types.
#
# + authType - Type of authentication.
# + enabled - Enable/disable the specific authentication type.
public type Authentication record {|
    string authType?;
    boolean enabled = true;
|};

# Interceptor policy configuration for an operation.
#
# + parameters - Contains interceptor policy parameters
public type InterceptorPolicy record {
    *BaseOperationPolicy;
    InterceptorPolicy_parameters parameters?;
};

# APK configuration for a given API
#
# + id - UUID of the API.
# + name - Name of the API.
# + basePath - Context of the API.
# + version - Version of the API.
# + 'type - Type of the API. ex: REST, GraphQL
# + definitionPath - Endpoint to expose API Definition.
# + defaultVersion - Is this the default version of the API.
# + subscriptionValidation - Is subscription validation enabled for the API.
# + environment - Environment of the API.
# + endpointConfigurations - Sandbox and production endpoint configurations of the API
# + aiProvider - AI provider configuration for the API.
# + operations - List of operations for this API.
# + apiPolicies - Policies like interceptor to be added to the entire API.
# + rateLimit - Rate limiting configuration for the API.
# + authentication - Authentication configuration for the API.
# + additionalProperties - Map of custom properties of API  
# + corsConfiguration - CORS Configuration of API
public type APKConf record {
    string id?;
    @constraint:String {maxLength: 60, minLength: 1}
    string name;
    @constraint:String {maxLength: 256, minLength: 1}
    string basePath;
    @constraint:String {maxLength: 30, minLength: 1}
    string version;
    string 'type = API_TYPE_REST;
    string definitionPath?;
    boolean defaultVersion = false;
    boolean subscriptionValidation = false;
    string environment?;
    EndpointConfigurations endpointConfigurations?;
    AIProvider aiProvider?;
    APKOperations[] operations?;
    APIOperationPolicies apiPolicies?;
    RateLimit rateLimit?;
    AuthenticationRequest[] authentication?;
    APKConf_additionalProperties[] additionalProperties?;
    CORSConfiguration corsConfiguration?;
};

# Configuration for an AI provider.
#
# + name - The name of the AI provider.
# + apiVersion - The version of the AI provider.
public type AIProvider record {
    string name;
    string apiVersion;
};

# Configuration for Interceptor Policy parameters.
#
# + backendUrl - Backend URL of the interceptor service.
# + headersEnabled - Indicates whether request/response headers should be sent to the interceptor service.
# + bodyEnabled - Indicates whether request/response body should be sent to the interceptor service.
# + trailersEnabled - Indicates whether request/response trailers should be sent to the interceptor service.
# + contextEnabled - Indicates whether context details should be sent to the interceptor service.
# + tlsSecretName - (Optional parameter) The reference name for K8s ConfigMap with TLS information.
# + tlsSecretKey - (Optional parameter)The TLS key name.
public type InterceptorPolicy_parameters record {|
    string backendUrl?;
    boolean headersEnabled?;
    boolean bodyEnabled?;
    boolean trailersEnabled?;
    boolean contextEnabled?;
    string tlsSecretName?;
    string tlsSecretKey?;
|};

# Configuration for Backend JWT Policy parameters.
#
# + encoding - The encoding method for the JWT.
# + signingAlgorithm - The algorithm used for signing the JWT.
# + header - The header used for the JWT.
# + tokenTTL - The time-to-live (TTL) for the token.
# + customClaims - Custom claims to be included in the JWT.
public type BackendJWTPolicy_parameters record {|
    string encoding?;
    string signingAlgorithm?;
    string header?;
    int tokenTTL?;
    CustomClaims[] customClaims?;
|};

# Configuration for Backend JWT Policy.
#
# + parameters - The parameters for the backend JWT policy.
public type BackendJWTPolicy record {
    *BaseOperationPolicy;
    BackendJWTPolicy_parameters parameters?;
};

# Configuration for Retry Policy.
#
# + count - The number of retry attempts.
# + baseIntervalMillis - The base interval between retries in milliseconds.
# + statusCodes - The status codes that trigger a retry.
public type RetryPolicy record {
    int count?;
    int baseIntervalMillis?;
    int[] statusCodes?;
};

# Configuration for API Key Auth Type
#
# + required - If APIKey is optional or mandatory
# + sendTokenToUpstream - Enables sending the API Key to upstream.
# + headerName - Name of APIKey header.
# + queryParamName - Name of APIKey query parameter.
# + headerEnable - Enable sending API Key in header.
# + queryParamEnable - Enable sending API Key as a query param.
public type APIKeyAuthentication record {|
    *Authentication;
    string required = "optional";
    boolean sendTokenToUpstream = false;
    string headerName = "apiKey";
    string queryParamName = "apiKey";
    boolean headerEnable = true;
    boolean queryParamEnable = false;
|};

# Mutual SSL configuration of this API
#
# + required - If mTLS is optional or mandatory
# + certificates - The list of config map refs referring to the client certificates
public type MTLSAuthentication record {|
    *Authentication;
    string required = "optional";
    ConfigMapRef[] certificates;
|};

# Configuration for K8s Secret.
#
# + secretName - Name of Secret. 
# + secretKey - Key containing the relevant value.
public type Certificate record {
    string secretName?;
    string secretKey?;
};

# Configuration for K8s ConfigMap.
#
# + name - Name of ConfigMap.
# + key - Key containing the relevant value.
public type ConfigMapRef record {
    string name;
    string key;
};

# Configuration for gateway model artifact.
#
# + name - The name of the gateway model artifact.
# + version - The version of the gateway model artifact.
# + productionHttpRoutes - The HTTP routes for the production environment.
# + sandboxHttpRoutes - The HTTP routes for the sandbox environment.
# + productionGrpcRoutes - The gRPC routes for the production environment.
# + sandboxGrpcRoutes - The gRPC routes for the sandbox environment.
# + namespace - The namespace of the gateway model artifact.
# + organization - The organization of the gateway model artifact.
# + uniqueId - The unique ID of the gateway model artifact.
public type GatewayModelArtifact record {
    string name;
    string 'version;
    model:HTTPRoute[] productionHttpRoutes = [];
    model:HTTPRoute[] sandboxHttpRoutes = [];
    model:GRPCRoute[] productionGrpcRoutes = [];
    model:GRPCRoute[] sandboxGrpcRoutes = [];
    string namespace?;
    string organization;
    string uniqueId;
};

# Kong gateway artifact.
#
# + rateLimits - Array of Kong rate limit plugins.
# + authentications - Array of Kong authentication plugins.
# + cors - Configuration for the Kong CORS plugin.
public type KongGatewayArtifact record {
    *GatewayModelArtifact;
    KongRateLimitPlugin[] rateLimits = [];
    KongAuthenticationPlugin[] authentications = [];
    KongCorsPlugin cors?;
};

# Kong plugin configuration.
#
# + apiVersion - The API version of the Kong plugin configuration. Default is "configuration.konghq.com/v1".
# + kind - The kind of the Kong plugin. Default is "KongPlugin".
# + metadata - Metadata about the Kong plugin.
# + plugin - The type of the Kong plugin.
# + enabled - Indicates whether the plugin is enabled. Defaults to `true`.
public type KongPlugin record {|
    string apiVersion = "configuration.konghq.com/v1";
    string kind = "KongPlugin";
    model:Metadata metadata;
    string plugin;
    boolean enabled = true;
|};

# Configuration for Kong rate limit plugin.
#
# + second - The rate limit per second.
# + minute - The rate limit per minute.
# + hour - The rate limit per hour.
# + day - The rate limit per day.
# + month - The rate limit per month.
# + year - The rate limit per year.
# + policy - The policy for rate limiting. Default is "local".
public type KongRateLimitPluginConfig record {|
    int second?;
    int minute?;
    int hour?;
    int day?;
    int month?;
    int year?;
    string policy = "local";
|};

# Kong rate limit plugin.
#
# + plugin - The name of the plugin, which is "rate-limiting".
# + config - The configuration for the Kong rate limit plugin.
public type KongRateLimitPlugin record {|
    *KongPlugin;
    string plugin = "rate-limiting";
    KongRateLimitPluginConfig config;
|};

# Configuration for Kong key authentication plugin.
#
# + key_names - Array of parameter names where the plugin will look for a key.
# + hide_credentials - If true, the plugin strips the credential from the request.
# + key_in_header - If enabled, the plugin reads the request header for the key.
# + key_in_query - If enabled, the plugin reads the query parameter for the key.
# + key_in_body - If enabled, the plugin reads the request body for the key.
# + run_on_preflight - Indicates whether the plugin should run on OPTIONS preflight requests.
# + realm - When authentication fails, the plugin sends WWW-Authenticate header with realm attribute value.
# + anonymous - An optional string value to use as an “anonymous” consumer if authentication fails.
public type KongKeyAuthPluginConfig record {|
    string[] key_names;
    boolean hide_credentials = false;
    boolean key_in_header = true;
    boolean key_in_query = true;
    boolean key_in_body = true;
    boolean run_on_preflight = true;
    string realm?;
    string anonymous?;
|};

# Kong key authentication plugin.
#
# + plugin - The name of the plugin, which is "key-auth".
# + config - The configuration for the Kong key authentication plugin.
public type KongKeyAuthPlugin record {|
    *KongPlugin;
    string plugin = "key-auth";
    KongKeyAuthPluginConfig config;
|};

# Configuration for Kong jwt authentication plugin.
#
# + key_claim_name - The name of the claim in which the key identifying the secret must be passed.
# + run_on_preflight - Indicates whether the plugin should run on OPTIONS preflight requests.
# + secret_is_base64 - If true, the plugin assumes the credential’s secret to be base64 encoded.
# + maximum_expiration - Limits the lifetime of the JWT to maximum_expiration seconds.
# + header_names - A list of HTTP header names that Kong will inspect to retrieve JWTs.
# + uri_param_names - A list of querystring parameters that Kong will inspect to retrieve JWTs.
# + cookie_names - A list of cookie names that Kong will inspect to retrieve JWTs.
# + claims_to_verify - A list of registered claims that Kong can verify. Accepted values: exp or nbf.
# + realm - When authentication fails, the plugin sends WWW-Authenticate header with realm attribute value.
# + anonymous - An optional string value to use as an “anonymous” consumer if authentication fails.
public type KongJWTAuthPluginConfig record {|
    string key_claim_name = "iss";
    boolean run_on_preflight = true;
    boolean secret_is_base64 = false;
    int maximum_expiration = 0;
    string[] header_names = ["Authorization"];
    string[] uri_param_names = ["jwt"];
    string[] cookie_names?;
    string claims_to_verify?;
    string realm?;
    string anonymous?;
|};

# Kong jwt authentication plugin.
#
# + plugin - The name of the plugin, which is "jwt".
# + config - The configuration for the Kong jwt authentication plugin.
public type KongJWTAuthPlugin record {|
    *KongPlugin;
    string plugin = "jwt";
    KongJWTAuthPluginConfig config;
|};

# Configuration for Kong oauth2 authentication plugin.
#
# + provision_key - The unique key the plugin has generated when it has been added to the Service.
# + token_expiration - An optional integer value telling the plugin how many seconds a token should last, after which the client will need to refresh the token. Set to 0 to disable the expiration.
# + mandatory_scope - An optional boolean value telling the plugin to require at least one scope to be authorized by the end user.
# + enable_authorization_code - An optional boolean value to enable the three-legged Authorization Code flow (RFC 6742 Section 4.1).
# + enable_implicit_grant - An optional boolean value to enable the Implicit Grant flow which allows to provision a token as a result of the authorization process (RFC 6742 Section 4.2).
# + enable_client_credentials - An optional boolean value to enable the Client Credentials Grant flow (RFC 6742 Section 4.4).
# + enable_password_grant - An optional boolean value to enable the Resource Owner Password Credentials Grant flow (RFC 6742 Section 4.3).
# + hide_credentials - An optional boolean value telling the plugin to show or hide the credential from the upstream service.
# + accept_http_if_already_terminated - Accepts HTTPs requests that have already been terminated by a proxy or load balancer.
# + global_credentials - An optional boolean value that allows using the same OAuth credentials generated by the plugin with any other service whose OAuth 2.0 plugin configuration also has config.global_credentials=true.
# + auth_header_name - The name of the header that is supposed to carry the access token.
# + refresh_token_ttl - Time-to-live value for data.
# + reuse_refresh_token - An optional boolean value that indicates whether an OAuth refresh token is reused when refreshing an access token.
# + persistent_refresh_token - An optional boolean value that indicates whether the refresh token should be persistent.
# + pkce - Specifies a mode of how the Proof Key for Code Exchange (PKCE) should be handled by the plugin. Must be one of: none, lax, strict.
# + scopes - Describes an array of scope names that will be available to the end user. If mandatory_scope is set to true, then scopes are required.
# + realm - When authentication fails the plugin sends WWW-Authenticate header with realm attribute value.
# + anonymous - An optional string (consumer UUID or username) value to use as an “anonymous” consumer if authentication fails.
public type KongOAuth2AuthPluginConfig record {|
    string provision_key;
    int token_expiration = 7200;
    boolean mandatory_scope = false;
    boolean enable_authorization_code = false;
    boolean enable_implicit_grant = false;
    boolean enable_client_credentials = false;
    boolean enable_password_grant = false;
    boolean hide_credentials = false;
    boolean accept_http_if_already_terminated = false;
    boolean global_credentials = false;
    string auth_header_name = "Authorization";
    int refresh_token_ttl = 1209600;
    boolean reuse_refresh_token = false;
    boolean persistent_refresh_token = false;
    string pkce = "lax";
    string[] scopes?;
    string realm?;
    string anonymous?;
|};

# Kong jwt authentication plugin.
#
# + plugin - The name of the plugin, which is "jwt".
# + config - The configuration for the Kong jwt authentication plugin.
public type KongOAuth2AuthPlugin record {|
    *KongPlugin;
    string plugin = "oauth2";
    KongOAuth2AuthPluginConfig config;
|};

# Configuration for Kong mTLS authentication plugin.
#
# + ca_certificates - List of CA Certificates strings to use as Certificate Authorities (CA) when validating a client certificate.
# + consumer_by - Whether to match the subject name of the client-supplied certificate against consumer’s username and/or custom_id attribute.
# + cache_ttl - Cache expiry time in seconds.
# + skip_consumer_lookup - Skip consumer lookup once certificate is trusted against the configured CA list.
# + allow_partial_chain - Allow certificate verification with only an intermediate certificate.
# + authenticated_group_by - Certificate property to use as the authenticated group (Must be one of: CN, DN).
# + revocation_check_mode - Controls client certificate revocation check behavior (Must be one of: SKIP, IGNORE_CA_ERROR, STRICT).
# + http_timeout - HTTP timeout threshold in milliseconds when communicating with the OCSP server or downloading CRL.
# + cert_cache_ttl - The length of time in seconds between refreshes of the revocation check status cache.
# + send_ca_dn - Sends the distinguished names (DN) of the configured CA list in the TLS handshake message.
# + default_consumer - The UUID or username of the consumer to use when a trusted client certificate is presented but no consumer matches.
# + http_proxy_host - A string representing a host name, such as example.com.
# + http_proxy_port - An integer representing a port number between 0 and 65535, inclusive.
# + https_proxy_host - A string representing a host name, such as example.com.
# + https_proxy_port - An integer representing a port number between 0 and 65535, inclusive.
# + anonymous - An optional string (consumer UUID or username) value to use as an “anonymous” consumer if authentication fails.
public type KongMTLSAuthPluginConfig record {|
    string[] ca_certificates?;
    string consumer_by = "username, custom_id";
    int cache_ttl = 60;
    boolean skip_consumer_lookup = false;
    boolean allow_partial_chain = false;
    string authenticated_group_by = "CN";
    string revocation_check_mode = "IGNORE_CA_ERROR";
    int http_timeout = 30000;
    int cert_cache_ttl = 60000;
    boolean send_ca_dn = false;
    string default_consumer?;
    string http_proxy_host?;
    int http_proxy_port?;
    string https_proxy_host?;
    int https_proxy_port?;
    string anonymous?;
|};

# Kong mTLS authentication plugin.
#
# + plugin - The name of the plugin, which is "mtls-auth".
# + config - The configuration for the Kong mTLS authentication plugin.
public type KongMTLSAuthPlugin record {|
    *KongPlugin;
    string plugin = "mtls-auth";
    KongMTLSAuthPluginConfig config;
|};

# All possible kong authentication types that supports APK
public type KongAuthenticationPlugin KongKeyAuthPlugin|KongJWTAuthPlugin|KongOAuth2AuthPlugin|KongMTLSAuthPlugin;

# Configuration for Kong CORS plugin.
#
# + origins - List of allowed domains for the Access-Control-Allow-Origin header. Use `*` to allow all origins. Values can be flat strings or PCRE regexes.
# + methods - Value for the Access-Control-Allow-Methods header. Available options include GET, HEAD, PUT, PATCH, POST, DELETE, OPTIONS, TRACE, CONNECT. Default is all options.
# + max_age - Indicates how long the results of the preflight request can be cached, in seconds.
# + credentials - Flag to determine whether the Access-Control-Allow-Credentials header should be sent with true as the value. Default is false.
# + private_network - Flag to determine whether the Access-Control-Allow-Private-Network header should be sent with true as the value. Default is false.
# + preflight_continue - A boolean value that instructs the plugin to proxy the OPTIONS preflight request to the Upstream service. Default is false.
# + headers - Value for the Access-Control-Allow-Headers header.
# + exposed_headers - Value for the Access-Control-Expose-Headers header. If not specified, no custom headers are exposed.
public type KongCorsPluginConfig record {|
    string[] origins?;
    string[] methods = HTTP_DEFAULT_METHODS;
    int max_age?;
    boolean credentials = false;
    boolean private_network = false;
    boolean preflight_continue = false;
    string[] headers?;
    string[] exposed_headers?;

|};

# Kong CORS plugin.
#
# + plugin - The name of the plugin, which is "cors".
# + config - The configuration for the Kong cors plugin.
public type KongCorsPlugin record {|
    *KongPlugin;
    string plugin = "cors";
    KongCorsPluginConfig config;
|};

# Configuration for Kong request transformer advanced plugin remove attribute.
#
# + body - Array of type string
# + headers - Array of type string
# + querystring - Array of type string
public type KongRTAPluginRemoveConfig record {|
    string[] body?;
    string[] headers?;
    string[] querystring?;
|};

# Configuration for Kong request transformer advanced plugin referenceable config.
#
# + body - Array of type string, referenceable
# + headers - Array of type string, referenceable
# + querystring - Array of type string, referenceable
# + json_types - Array of type string, must be one of: boolean, number, string
public type KongRTAPluginReferenceConfig record {|
    string[] body?;
    string[] headers?;
    string[] querystring?;
    string[] json_types?;
|};

# Configuration for Kong request transformer advanced plugin allow attribute.
#
# + body - A map containing a set of type string.
public type KongRTAPluginAllowConfig record {|
    map<string> body?;
|};

# Configuration for Kong request transformer advanced plugin.
#
# + http_method - The HTTP method to be transformed.
# + remove - Configuration for removing attributes.
# + replace - Configuration for replacing attributes.
# + add - Configuration for adding attributes.
# + append - Configuration for appending attributes.
# + allow - Configuration for allowing attributes.
# + dots_in_keys - Flag to allow dots in keys.
public type KongRTAPluginConfig record {|
    string http_method = "^%u+$";
    KongRTAPluginRemoveConfig remove?;
    KongRTAPluginReferenceConfig replace?;
    KongRTAPluginReferenceConfig add?;
    KongRTAPluginReferenceConfig append?;
    KongRTAPluginAllowConfig allow?;
    boolean dots_in_keys = true;
|};

# Kong request transformer advanced plugin.
#
# + plugin - The name of the plugin, which is "request-transformer-advanced".
# + config - The configuration for the Kong request transformer advanced plugin.
public type KongRequestTransformerAdvancedPlugin record {|
    *KongPlugin;
    string plugin = "request-transformer-advanced";
    KongRTAPluginConfig config;
|};
